#!/bin/bash

## This file is meant to be used as a interface to check if all the supported language test cases passes like (bash
## java, java-junit-improved , junit python , sqlite ) etc in the folder tests.
# This can be run after the docker is build and from this file can be executed from the command line.

# It essentially goes through all the folder in the test folder, prepares the docker run command that executes the ./run file
# retrieves the expectedFile ( prechecked in knowing what will be the output of a given language pack with and the lines removed such
# 'OK (0.010 sec real, 0.010 sec wall)' or 'Test run finished after' and checks every line for the run stored in the actualFile variable.

##:ATTENSION!!!!!!! PAY CLOSE ATTENTION TO THE LINE ENDINGS FOR EACH OF THE expected.txt files, make sure its LF ,
# choose the file and change it from file ->file properties -> line separator to LF Unix and mac

for directory in *; do

  [[ ! -d $directory ]] && continue
  docker run -i -v $PWD:/tests -w /tests --privileged test bash  ./run -l $directory --isolate > $directory/actual.txt
  # Isolate outputs the OK ... for all the files as a line
  actualFile=`sed -n '/OK/d;/Test run finished after/!p;/^[[:space:]]*$/d' $directory/actual.txt` # remove any line with OK (....) as the numbers in the line will vary from run to run
  expectedFile=`sed -n '/OK/d;/Test run finished after/!p;/^[[:space:]]*$/d' $directory/expected.txt` # remove any line with OK (....) as the numbers in the line will vary from run to run

 #echo "$actualFile" #ENABLE THIS TO DEBUG
 #echo "$expectedFile"  #ENADLE THIS TO DEBUG
  exitCode=0
  if [[ "$actualFile" =~ "$expectedFile" ]]; then
      echo $directory ": PASSED"
      rm -f $directory/actual.txt
  else
      echo $directory ": FAILED!!!!!"
      exitCode=1
      break;
  fi
done
exit $exitCode;
